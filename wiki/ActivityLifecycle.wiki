=Activity LifeCycle=

[http://developer.android.com/images/training/basics/basic-lifecycle.png]

*onPause()* - still partially visible.

You should usually use the *onPause()* callback to:

 * Stop animations or other ongoing actions that could consume CPU.
 * Commit unsaved changes, but only if users expect such changes to be permanently saved when they leave (such as a draft email).
 * Release system resources, such as broadcast receivers, handles to sensors (like GPS), or any resources that may affect battery life while your activity is paused and the user does not need them.

{{{
@Override
public void onPause() {
    super.onPause();  // Always call the superclass method first

    // Release the Camera because we don't need it when paused
    // and other activities might need to use it.
    if (mCamera != null) {
        mCamera.release()
        mCamera = null;
    }
}
}}}

{{{
@Override
public void onResume() {
    super.onResume();  // Always call the superclass method first

    // Get the Camera instance as the activity achieves full user focus
    if (mCamera == null) {
        initializeCamera(); // Local method to handle camera init
    }
}
}}}